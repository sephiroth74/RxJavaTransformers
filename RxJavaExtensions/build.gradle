plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id "jacoco"
    id 'com.github.kt3k.coveralls' version '2.12.0'
    id 'io.gitlab.arturbosch.detekt'
}


apply from: "${rootProject.rootDir}/detekt.gradle"

group "it.sephiroth.android.library"
version "3.1.3-SNAPSHOT"

coveralls {
    jacocoReportPath 'build/reports/coverage/androidTest/debug/report.xml'
}

jacoco {
    toolVersion = "0.8.10"
}


android {
    compileSdk 34

    defaultConfig {
        minSdk 24

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false

        }

        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        animationsDisabled true

        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

    // jacoco doesn't work with java 11 and kotlin 1.5.+
    // https://issuetracker.google.com/issues/178400721

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    lintOptions {
        abortOnError false
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    namespace 'it.sephiroth.android.rxjava3.extensions'
}

dependencies {
    api 'io.reactivex.rxjava3:rxjava:3.1.9'
    api 'io.reactivex.rxjava3:rxandroid:3.0.2'
    api 'io.reactivex.rxjava3:rxkotlin:3.0.1'

    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'androidx.annotation:annotation:1.8.2'


    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.23.6"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}

configurations.configureEach {
    resolutionStrategy.eachDependency {
        if (requested.group == "org.jacoco") {
            useVersion("0.8.10")
        }
    }
}

afterEvaluate {

    setupAndroidReporting()

    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId = group
                version = version
            }
        }
    }
}

def setupAndroidReporting() {
    println("setupAndroidReporting")

    tasks.withType(Test).configureEach {
        // Whether or not classes without source location should be instrumented
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }

    // When no product flavors defined, use empty
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        println("productFlavorName: $productFlavorName")

        buildTypes.each { buildTypeName ->
            println("buildTypeName: $buildTypeName")

            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }

            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            def coverageTaskName = "${testTaskName}Coverage"
            System.out.println("Task -> $testTaskName (generate report: $coverageTaskName)")

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "$coverageTaskName"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def fileFilter = [
                        // data binding
                        'android/databinding/**/*.class',
                        '**/android/databinding/*Binding.class',
                        '**/android/databinding/*',
                        '**/androidx/databinding/*',
                        '**/BR.*',
                        // android
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/*Test*.*',
                        'android/**/*.*',
                        // kotlin
                        '**/*MapperImpl*.*',
                        '**/*$ViewInjector*.*',
                        '**/*$ViewBinder*.*',
                        '**/BuildConfig.*',
                        '**/*Component*.*',
                        '**/*BR*.*',
                        '**/Manifest*.*',
                        '**/*$Lambda$*.*',
                        '**/*Companion*.*',
                        '**/*Module*.*',
                        '**/*Dagger*.*',
                        '**/*Hilt*.*',
                        '**/*MembersInjector*.*',
                        '**/*_MembersInjector.class',
                        '**/*_Factory*.*',
                        '**/*_Provide*Factory*.*',
                        '**/*Extensions*.*',
                        // sealed and data classes
                        '**/*$Result.*',
                        '**/*$Result$*.*',
                        // adapters generated by moshi
                        '**/*JsonAdapter.*',
                ]

                def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/$sourceName/classes", excludes: fileFilter)
                def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/$sourceName", excludes: fileFilter)

                classDirectories.from = files([javaTree], [kotlinTree])

                //sourceSets.add(sourceSets.main)
                executionData.from = files([
                        fileTree(project.buildDir).include("/jacoco/*.exec"),
                        fileTree(project.buildDir).include("outputs/code_coverage/debugAndroidTest/connected/**/*.ec")
                ])

                def coverageSourceDirs = ["$project.projectDir/src/main/java", "src/$productFlavorName/java", "src/$buildTypeName/java"]

                sourceDirectories.setFrom(files(coverageSourceDirs))
                additionalSourceDirs.setFrom(files(coverageSourceDirs))

                reports {}

                def parentTaskName = "create${buildTypeName.capitalize()}CoverageReport"

                tasks.named(coverageTaskName).get().dependsOn(parentTaskName)
            }
        }
    }
}
